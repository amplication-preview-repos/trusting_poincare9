/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlaylistTrackService } from "../playlistTrack.service";
import { PlaylistTrackCreateInput } from "./PlaylistTrackCreateInput";
import { PlaylistTrack } from "./PlaylistTrack";
import { PlaylistTrackFindManyArgs } from "./PlaylistTrackFindManyArgs";
import { PlaylistTrackWhereUniqueInput } from "./PlaylistTrackWhereUniqueInput";
import { PlaylistTrackUpdateInput } from "./PlaylistTrackUpdateInput";

export class PlaylistTrackControllerBase {
  constructor(protected readonly service: PlaylistTrackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlaylistTrack })
  async createPlaylistTrack(
    @common.Body() data: PlaylistTrackCreateInput
  ): Promise<PlaylistTrack> {
    return await this.service.createPlaylistTrack({
      data: {
        ...data,

        playlist: data.playlist
          ? {
              connect: data.playlist,
            }
          : undefined,

        track: data.track
          ? {
              connect: data.track,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        position: true,

        playlist: {
          select: {
            id: true,
          },
        },

        track: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlaylistTrack] })
  @ApiNestedQuery(PlaylistTrackFindManyArgs)
  async playlistTracks(
    @common.Req() request: Request
  ): Promise<PlaylistTrack[]> {
    const args = plainToClass(PlaylistTrackFindManyArgs, request.query);
    return this.service.playlistTracks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        position: true,

        playlist: {
          select: {
            id: true,
          },
        },

        track: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlaylistTrack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async playlistTrack(
    @common.Param() params: PlaylistTrackWhereUniqueInput
  ): Promise<PlaylistTrack | null> {
    const result = await this.service.playlistTrack({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        position: true,

        playlist: {
          select: {
            id: true,
          },
        },

        track: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlaylistTrack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlaylistTrack(
    @common.Param() params: PlaylistTrackWhereUniqueInput,
    @common.Body() data: PlaylistTrackUpdateInput
  ): Promise<PlaylistTrack | null> {
    try {
      return await this.service.updatePlaylistTrack({
        where: params,
        data: {
          ...data,

          playlist: data.playlist
            ? {
                connect: data.playlist,
              }
            : undefined,

          track: data.track
            ? {
                connect: data.track,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          position: true,

          playlist: {
            select: {
              id: true,
            },
          },

          track: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlaylistTrack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlaylistTrack(
    @common.Param() params: PlaylistTrackWhereUniqueInput
  ): Promise<PlaylistTrack | null> {
    try {
      return await this.service.deletePlaylistTrack({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          position: true,

          playlist: {
            select: {
              id: true,
            },
          },

          track: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
